/**
 * This file Copyright (c) 2005-2010 Aptana, Inc. This program is
 * dual-licensed under both the Aptana Public License and the GNU General
 * Public license. You may elect to use one or the other of these licenses.
 * 
 * This program is distributed in the hope that it will be useful, but
 * AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 * NONINFRINGEMENT. Redistribution, except as permitted by whichever of
 * the GPL or APL you select, is prohibited.
 *
 * 1. For the GPL license (GPL), you can redistribute and/or modify this
 * program under the terms of the GNU General Public License,
 * Version 3, as published by the Free Software Foundation.  You should
 * have received a copy of the GNU General Public License, Version 3 along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 * Aptana provides a special exception to allow redistribution of this file
 * with certain other free and open source software ("FOSS") code and certain additional terms
 * pursuant to Section 7 of the GPL. You may view the exception and these
 * terms on the web at http://www.aptana.com/legal/gpl/.
 * 
 * 2. For the Aptana Public License (APL), this program and the
 * accompanying materials are made available under the terms of the APL
 * v1.0 which accompanies this distribution, and is available at
 * http://www.aptana.com/legal/apl/.
 * 
 * You may view the GPL, Aptana's exception and additional terms, and the
 * APL in the file titled license.html at the root of the corresponding
 * plugin containing this source file.
 * 
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.editor.css.parsing;

import java.util.ArrayList;

import beaver.Action;
import beaver.Parser;
import beaver.ParsingTables;
import beaver.Scanner;
import beaver.Symbol;

import com.aptana.editor.css.parsing.ast.CSSAttributeSelectorNode;
import com.aptana.editor.css.parsing.ast.CSSCharSetNode;
import com.aptana.editor.css.parsing.ast.CSSDeclarationNode;
import com.aptana.editor.css.parsing.ast.CSSErrorDeclarationNode;
import com.aptana.editor.css.parsing.ast.CSSErrorExpressionNode;
import com.aptana.editor.css.parsing.ast.CSSExpressionNode;
import com.aptana.editor.css.parsing.ast.CSSFunctionNode;
import com.aptana.editor.css.parsing.ast.CSSImportNode;
import com.aptana.editor.css.parsing.ast.CSSMediaNode;
import com.aptana.editor.css.parsing.ast.CSSPageNode;
import com.aptana.editor.css.parsing.ast.CSSRuleNode;
import com.aptana.editor.css.parsing.ast.CSSSimpleSelectorNode;
import com.aptana.editor.css.parsing.ast.CSSTermListNode;
import com.aptana.editor.css.parsing.ast.CSSTermNode;
import com.aptana.parsing.IParseState;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.ast.ParseRootNode;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CSS.grammar".
 */
@SuppressWarnings({"rawtypes", "unchecked", "nls"})
public class CSSParser extends Parser implements IParser {

	// suppress the error printouts
	private static class CSSEvents extends Events
	{

		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9obLkTt55KK$ytE1Xo1H0n8mBX0B6H9Deb9I8naav2sAXRiKXGL2oAeO1SvyWTuZfpZ9p$" +
		"b4oZOKEnTx0BsGYnOi5TYhrn$xxwtkyEoIwBEdD$SE$VTzkwxyzu0tlLeHWkwC1hZiIyIw4" +
		"GJgZ42X#CmlhUZ1hMemw6eHmCQCGsL6AiMIx4Vpa07sZ235d6CL8lYF1Rdu2piWrASXpDnh" +
		"hDefVqrM8OhSBfinq5OZbwSZ6in4JqOWoYAC0p3iHS2PfJ4KSme4h9OZJ9QnDHYCbAO6hQG" +
		"dRXKO#vFJpPc2Ix3vI9EFaKsMhayQUGu0BEmDyRH$oZh7wVWIipDo6TIdetziMPx5MFxE0v" +
		"7u#fTihKH9k1i5$aaZM2bvQoGbNQhzFXCX3cCS20EnY6OZVaPwO9mNDQXYd6hDUxvkWBXk4" +
		"su08jq1IwK9tPR0QEzc1MUZnFa4rQuIHx74jK6JiohtGjp7KDTq7UAJwkDtRJjtCnbvvOAp" +
		"JWhHKZQdP7QEfZh21p9sMUvRan21Unrh79TRiHqw4BMmNWwZIFMqqMu69UucDETp7HEBpM1" +
		"KpcFfQJBC8#Lp79WvnIwKl3OSt7Mk9Zza#2y0yuxO9#Fudi9EteqluzIzjXOVWdZsDM1MbH" +
		"oV2hxU18xC#2g5gb5LnwB25To1cti6bgB2jh7QL$5lCtwrdBSrDhm7bUYcQlGmhMOhXdvpA" +
		"WZPD5BVxNCrrh4#2s6BQ3v#RH8nonYdut8oCrjvRxAoxWZJE1NLCcEjFvD9MepSe$ot6mdk" +
		"jZ5$4h2iMs4Q2PoL2EafIETDAxI81EXan5ibqKPAIrDx18t4Uf8Jps6umRif1vTWNBUkIjW" +
		"j8rD9NCt#GVKqHNcNb6SNrju6Lq#0yJuL6tIVDg#ZjYvnR8ppaf9itM8PtIr3ggbiyzo76b" +
		"5KlIo72LsnDIXd7KmdZZYF9azPOgDoGwrCgFfeSxE0vMajf8PZhHT2boS1x1YfVr65fhlsl" +
		"25eBq5n1nVGYmsF1tjTBBwF3OfZlz2kjgzhr#PtWc0JiVFTVH7eZLaQ$QJVfEfUz#nf$m60" +
		"zCVpaVPqFMvLuDxDd2ZUx#1M4K$WNk$oT4Dn83Zrpcwd7fB7B$HnMUzlRYJrP2V7OgrDa$y" +
		"hTH9Elu7OfFZDnFRyinlmH1gq1ZoNqei6imc3Ix3Tc9Wy1WOxsYresj2yKjoT5VbYTDFKf5" +
		"h#r$0U3mLlFR$uyFv6JE4ULz7lSavidcKpNJpCltT5nhhA#2dRq$ZERfRXf3xBAUxmXBvM$" +
		"wKF#Ht#Kr#rMyJyhC#VoAOetmcdyhJyfJJPkV9W78xYE#L#q0#Klg#lCVdE$AMl2dtotroh" +
		"zmZ6#HkkKlMovroXzmkjwdUvz8lZycZyeWyB5lbRNbNjZdl7phw7V6jSjyGNolt5V4byOQy" +
		"9Y$BAx95Dl7jHNb1dfVdLEDPVJwZprlaPbaZc#KbkLNMoLfvLHwI1#K1#K9Ubx#eC8TdggT" +
		"$GntSHSt9MLy0JTntcnLHdZu6HJo3VFrFQr5#64yaduZoNFA9g9wB2VqBi7y2hOg8qYHfah" +
		"IHj96qWJeDj6aWtqQ#ZV8svJtTpslqJy4dF9w74Vrpg2AjKkfnPuyGvgmpY3Yattqz0xl86" +
		"qnpw75epq5d27N$4jKXT8SG$mS4WHW4");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	private final Action[] actions;

	private CSSScanner fScanner;

	public CSSParser() {
		super(PARSING_TABLES);
		report = new CSSEvents();
		fScanner = new CSSScanner();

		actions = new Action[] {
			new Action() {	// [0] Program = Statements.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final beaver.Symbol[] p = _list_p == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_p.toArray(new beaver.Symbol[_list_p.size()]);
					return new ParseRootNode(ICSSParserConstants.LANGUAGE, p, _symbol_p.getStart(), _symbol_p.getEnd());
				}
			},
			new Action() {	// [1] Program = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					return new ParseRootNode(ICSSParserConstants.LANGUAGE, new Symbol[0], 0, 0);
				}
			},
			new Action() {	// [2] Statements = Statements Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [3] Statements = Statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [4] Statement = CharSet
			Action.RETURN,	// [5] Statement = Import
			Action.RETURN,	// [6] Statement = Media
			Action.RETURN,	// [7] Statement = Page
			Action.RETURN,	// [8] Statement = AtRule
			Action.RETURN,	// [9] Statement = Rule
			new Action() {	// [10] CharSet = CHARSET.c STRING.s SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol e = _symbols[offset + 3];
					return new CSSCharSetNode(s, c.getStart(), e.getEnd());
				}
			},
			new Action() {	// [11] Import = IMPORT.i ImportWord.s SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol e = _symbols[offset + 3];
					return new CSSImportNode(s, i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [12] Import = IMPORT.i ImportWord.s List.m SEMICOLON.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final String[] m = _list_m == null ? new String[0] : (String[]) _list_m.toArray(new String[_list_m.size()]);
					final Symbol e = _symbols[offset + 4];
					return new CSSImportNode(s, m, i.getStart(), e.getEnd());
				}
			},
			new Action() {	// [13] Media = MEDIA.m List.l LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final String[] l = _list_l == null ? new String[0] : (String[]) _list_l.toArray(new String[_list_l.size()]);
					final Symbol r = _symbols[offset + 4];
					return new CSSMediaNode(l, m.getStart(), r.getEnd());
				}
			},
			new Action() {	// [14] Media = MEDIA.m List.l LCURLY Statements RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final String[] l = _list_l == null ? new String[0] : (String[]) _list_l.toArray(new String[_list_l.size()]);
					final Symbol r = _symbols[offset + 5];
					return new CSSMediaNode(l, m.getStart(), r.getEnd());
				}
			},
			new Action() {	// [15] Page = PAGE.p LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 3];
					return new CSSPageNode(p.getStart(), r.getEnd());
				}
			},
			new Action() {	// [16] Page = PAGE.p LCURLY Declarations.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol d = _symbols[offset + 3];
					final Symbol r = _symbols[offset + 4];
					return new CSSPageNode(d.value, p.getStart(), r.getEnd());
				}
			},
			new Action() {	// [17] Page = PAGE.p COLON IDENTIFIER.s LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					final Symbol r = _symbols[offset + 5];
					return new CSSPageNode(s, p.getStart(), r.getEnd());
				}
			},
			new Action() {	// [18] Page = PAGE.p COLON IDENTIFIER.s LCURLY Declarations.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 3];
					final String s = (String) _symbol_s.value;
					final Symbol d = _symbols[offset + 5];
					final Symbol r = _symbols[offset + 6];
					return new CSSPageNode(s, d.value, p.getStart(), r.getEnd());
				}
			},
			RETURN3,	// [19] AtRule = AT_KEYWORD STRING SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN4,	// [20] AtRule = AT_KEYWORD STRING LCURLY RCURLY; returns 'RCURLY' although none is marked
			new Action() {	// [21] Rule = Selectors.s LCURLY RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final beaver.Symbol[] s = _list_s == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_s.toArray(new beaver.Symbol[_list_s.size()]);
					final Symbol r = _symbols[offset + 3];
					return new CSSRuleNode(s, r.getEnd());
				}
			},
			new Action() {	// [22] Rule = Selectors.s LCURLY Declarations.d RCURLY.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final beaver.Symbol[] s = _list_s == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_s.toArray(new beaver.Symbol[_list_s.size()]);
					final Symbol d = _symbols[offset + 3];
					final Symbol r = _symbols[offset + 4];
					return new CSSRuleNode(s, d.value, r.getEnd());
				}
			},
			Action.RETURN,	// [23] Rule = error
			new Action() {	// [24] Function = FUNCTION.l Expression.e RPAREN.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					return new CSSFunctionNode(e, l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [25] List = List COMMA IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [26] List = IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [27] Declarations = Subdeclarations
			new Action() {	// [28] Declarations = Subdeclarations.l Declaration2.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					_list_l.add(d); return _symbol_l;
				}
			},
			Action.RETURN,	// [29] Declarations = Declaration2
			new Action() {	// [30] Subdeclarations = Subdeclarations Declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [31] Subdeclarations = Declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [32] Declaration = Declaration2.d SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final CSSDeclarationNode d = (CSSDeclarationNode) _symbol_d.value;
					final Symbol s = _symbols[offset + 2];
					d.setHasSemicolon(s); return d;
				}
			},
			new Action() {	// [33] Declaration = SEMICOLON.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					return new CSSDeclarationNode(s);
				}
			},
			new Action() {	// [34] Declaration2 = Identifier.i COLON Expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					return new CSSDeclarationNode(_symbol_i, e);
				}
			},
			new Action() {	// [35] Declaration2 = Identifier.i COLON Expression.e IMPORTANT.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					return new CSSDeclarationNode(_symbol_i, e, _symbol_s);
				}
			},
			new Action() {	// [36] Declaration2 = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new CSSErrorDeclarationNode(e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [37] Expression = Expression.e Separator.s Term.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					return new CSSTermListNode(e, t, s);
				}
			},
			new Action() {	// [38] Expression = Expression.e Term.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final CSSExpressionNode e = (CSSExpressionNode) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final CSSExpressionNode t = (CSSExpressionNode) _symbol_t.value;
					return new CSSTermListNode(e, t);
				}
			},
			Action.RETURN,	// [39] Expression = Term
			new Action() {	// [40] Expression = error.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					return new CSSErrorExpressionNode(e.getStart(), e.getEnd());
				}
			},
			new Action() {	// [41] Term = Primitive.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					return new CSSTermNode(_symbol_p);
				}
			},
			Action.RETURN,	// [42] Term = Function
			new Action() {	// [43] Selectors = Selectors Combinator Selector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [44] Selectors = Selector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [45] Selector = Selector SimpleSelector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [46] Selector = SimpleSelector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [47] SimpleSelector = TypeOrUniversalSelector.t AttributeSelectors.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					return new CSSSimpleSelectorNode(_symbol_t, a);
				}
			},
			new Action() {	// [48] SimpleSelector = TypeOrUniversalSelector.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					return new CSSSimpleSelectorNode(_symbol_t);
				}
			},
			new Action() {	// [49] SimpleSelector = AttributeSelectors.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final CSSAttributeSelectorNode[] a = _list_a == null ? new CSSAttributeSelectorNode[0] : (CSSAttributeSelectorNode[]) _list_a.toArray(new CSSAttributeSelectorNode[_list_a.size()]);
					return new CSSSimpleSelectorNode(a);
				}
			},
			new Action() {	// [50] AttributeSelectors = AttributeSelectors AttributeSelector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [51] AttributeSelectors = AttributeSelector
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [52] AttributeSelector = CLASS.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					return new CSSAttributeSelectorNode(c, _symbol_c.getStart(), _symbol_c.getEnd());
				}
			},
			new Action() {	// [53] AttributeSelector = COLON.c IDENTIFIER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					return new CSSAttributeSelectorNode(":" + i, c.getStart(), _symbol_i.getEnd());
				}
			},
			new Action() {	// [54] AttributeSelector = COLON.c Function.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol _symbol_f = _symbols[offset + 2];
					final CSSExpressionNode f = (CSSExpressionNode) _symbol_f.value;
					return new CSSAttributeSelectorNode(f, c.getStart());
				}
			},
			new Action() {	// [55] AttributeSelector = COLOR.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					return new CSSAttributeSelectorNode(c, _symbol_c.getStart(), _symbol_c.getEnd());
				}
			},
			new Action() {	// [56] AttributeSelector = HASH.h
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_h = _symbols[offset + 1];
					final String h = (String) _symbol_h.value;
					return new CSSAttributeSelectorNode(h, _symbol_h.getStart(), _symbol_h.getEnd());
				}
			},
			new Action() {	// [57] AttributeSelector = LBRACKET.l IDENTIFIER.i RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol r = _symbols[offset + 3];
					return new CSSAttributeSelectorNode("[" + i + "]", l.getStart(), r.getEnd());
				}
			},
			new Action() {	// [58] AttributeSelector = LBRACKET.l IDENTIFIER.i AttributeValueOperator.o IdentiferOrString.s RBRACKET.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_o = _symbols[offset + 3];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					final Symbol r = _symbols[offset + 5];
					
			return new CSSAttributeSelectorNode("[" + i + " " + o + " " + s + "]", l.getStart(), r.getEnd());
				}
			},
			Action.RETURN,	// [59] ImportWord = STRING
			Action.RETURN,	// [60] ImportWord = URL
			Action.RETURN,	// [61] Identifier = IDENTIFIER
			Action.RETURN,	// [62] Identifier = PROPERTY
			Action.RETURN,	// [63] IdentiferOrString = IDENTIFIER
			Action.RETURN,	// [64] IdentiferOrString = STRING
			Action.RETURN,	// [65] Separator = FORWARD_SLASH
			Action.RETURN,	// [66] Separator = COMMA
			Action.RETURN,	// [67] Separator = PLUS
			Action.RETURN,	// [68] Separator = MINUS
			Action.RETURN,	// [69] Combinator = COMMA
			Action.RETURN,	// [70] Combinator = PLUS
			Action.RETURN,	// [71] Combinator = GREATER
			Action.RETURN,	// [72] Primitive = NUMBER
			Action.RETURN,	// [73] Primitive = PERCENTAGE
			Action.RETURN,	// [74] Primitive = LENGTH
			Action.RETURN,	// [75] Primitive = EMS
			Action.RETURN,	// [76] Primitive = EXS
			Action.RETURN,	// [77] Primitive = ANGLE
			Action.RETURN,	// [78] Primitive = TIME
			Action.RETURN,	// [79] Primitive = FREQUENCY
			Action.RETURN,	// [80] Primitive = STRING
			Action.RETURN,	// [81] Primitive = IDENTIFIER
			Action.RETURN,	// [82] Primitive = URL
			Action.RETURN,	// [83] Primitive = COLOR
			Action.RETURN,	// [84] TypeOrUniversalSelector = IDENTIFIER
			Action.RETURN,	// [85] TypeOrUniversalSelector = STAR
			Action.RETURN,	// [86] TypeOrUniversalSelector = SELECTOR
			Action.RETURN,	// [87] AttributeValueOperator = EQUAL
			Action.RETURN,	// [88] AttributeValueOperator = INCLUDES
			Action.RETURN	// [89] AttributeValueOperator = DASHMATCH
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}

	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		fScanner.setSource(new String(parseState.getSource()));
		IParseNode result = (IParseNode) parse(fScanner);
		parseState.setParseResult(result);
		return result;
	}
}
