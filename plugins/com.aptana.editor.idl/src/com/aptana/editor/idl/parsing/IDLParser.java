package com.aptana.editor.idl.parsing;

import java.util.ArrayList;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "IDL.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class IDLParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM0TuLLKI$kzxZ#YoBWl8AiQL1GiMX8qRGXG98ef6YX3GDGY44ae2eOc2DAbIfNT2YwW" +
		"WHNeJK4IA81t51e85451Kn4BP7VzpxkJbyl82kllvFkKZx$llb3DdPiwvzvux4o1m7CLm8s" +
		"x0tNWOz#DUt8RRKGQnY4C2gY0Hjw0gQgCqud4Vxi2$y4$4u25KG7cKHKayY9jmC#x4zVWxh" +
		"aCft8e7K0wLKH6LS1VkGGdKnJzGN4HcHo8EzkAZo4IAq7ekZzY#xRkezkrIZ5yVet0UCVw2" +
		"g$wF67#AG8mhVliOiYm2w$Xh168KYK2CeZP65cOW4#CGZR4OWXvu1dqm4FtnB0PZD99H20L" +
		"bBmhWtxIiRYtV3MlP7ICn2iliTIAUG4zqesKjpihYB3DlTzXv7sC$3k0JV4gx36lNFgnT5j" +
		"BFasSMBZllw9$jQ4OUeu$OqJRdMTTYNTSxPbtSZvoiswCHPcAbl2$$mKluoTf5eJ5txaKin" +
		"7HSoPtxCCJBjtPtTglMZrIyGEqmgssAV3pdFyCy1EZtQsPtaDazZdgeZmP8GLliuOolF1aa" +
		"muVMZ7ur8xsFRnYz8PhX4DhX97RXFOqIZUQ4hW1FepEweAkypVlxD#8QhAJN$FZ0jPQbKXz" +
		"DQ3tBMhiUMiX9Hfc8BHvTDAFbf#vxkozByJasCPyeUhmMrPYFuGrgaAzfvQU8TKWYNyVAdP" +
		"0ic$0e#SU8rt3Q#Xs73HZBQ5coZglVX0socbw#b7LoWZiIHLqQfHDeIOiDb5fXeto78#Y0N" +
		"dWI7UK8rkAuV267vP0SH6$##XBzY04OPENdC1GZC9pS66oNhp01up49KyXDnbHCmJJYURoC" +
		"sPY3kNW52p1VFi0IBC9ohC2hb5TXDTRW3N9B#NjJDcCzCtjTDk8jMO#Ts8otiGDRiKrUatq" +
		"uB5jmJBx75pWgnt42f$0TVW3m8yx0uHtqytxdu$pBS3bFu$nyOg$W#rs0fqr1xcPXFaT5UA" +
		"UkubqkohiLpVqrxtKn#mwNu5j#0y#Ac$ZUtynpuLQU5QLuMfJcUM5E1NCwWAT29E8ym9CdB" +
		"YAHOYCI9UdIllrFKIx5#Bt4Y8j0ZAIBP1rbBv9rn9uJ8pvi35CttiyOTxDcTBXoOnaTrl9E" +
		"LepbzLgHjMCbLgFHzhHoEClCAnTsNaxs3cjMOtTDM3k7bMNUUJhCyyAZ2NcCnjhHwhzuNUV" +
		"kkSFUhHft4UpjNBjyl2$nh5VgSC$DpfKAwwMSoWcCtogezR5kD#VyRQpZghBgTEZ5pugl6M" +
		"kp5gne7g7V1DQJEHd4SqP3HZUHKj6QqTrd89tFWCDwreqIJpu#62NxcIXaxwz1DNgD2QuWZ" +
		"ZLabQ2rgslCLSM6wE8PBIQeY#FJbc1rngF9n$06XdVb9aHDZzoIy0Nb#ketGAzHzYjadZcJ" +
		"cKCl2PHYBUTdBcRViYryz1dB2j9XzrACaezFUGrBpQyWVvM3gAnoSQ84kOhsNGYmjZTFQYp" +
		"x8qCVihYIV5rMrZxkL2AljHcjDj#ZHChrY0Ps98O$CrgBcPNbhnPHsbQhPLYzcZV0#2b4Yy" +
		"9s3qtMrrDoH6n#mDcUC7$#dRom3lEV0G85NPqZv6dZd7PbtnsKhoDD4VwHZY1IpPWxJk$mh" +
		"IN6g9n6dbMaRwFEFvLj#qS4$pAvFmMu7$4gRwTSadAwxbU0SbVIJ9MtNjYdVmkndllw8EbA" +
		"ueIh3nGdOeYEH1AHJ0pHEOl8FqQaUFoqepoIw4JuYT7gPmmndfX0J2GoS#SG6EhXXoaTeNI" +
		"Kqh5AnoaTo9WzI0SHaqByTV3mSqB65X3pbLz2B5P#gQwZL9ZyPb8$b9Jx4vXCVXlfQXsRHw" +
		"oXhXxfSDLDKTg5cAhyCgNHn0gYBZ6Do20swzWgWlSqa4Xa4IPEJM8wCPkOopYC7p3htgjpz" +
		"ddot45ioPs$lvBIPAKdGsr2rjkNuFiOs4$i8heH2ua3Ehy##Lx48i#SGyHX7Pz3$WXnLCSs" +
		"48E9OvwSDYarpxJU3tyDNhfxR1Z7fsU1F#3Id7UOkYobHvJkKNfCunOvtpf$xs3#nPJUgBI" +
		"aqjkLbb5QLccvN#uxzpD0NVRzZGlHpoUQXUYAUlBq$SfrrVRmAKeRAMsYD5LfSq$CXQfB2$" +
		"7NriFV5oPUHgWjQNlrsJTyZdxzBWMQ6dZcTzRn$XvTjgzhiyyUyuugRQFqQg#i$02blPNUI" +
		"$HJleyYohoFuNBC2ypZe4jHNEcg2zZFEbSEL0aPdq5TzRpdkz$h45s571vd0Lbk65ak$tLL" +
		"iWB1FvalIsI1SekLBY8MoYnvMMRA37b9NfGNPBeyBraoJQRA59aiaoHJ9ie46I$ZPAoCaT4" +
		"oIaRA21akmsIe397dPB0Cae4oGFfBFtbM#aeVwIszfAVqa6UakuqpM#OfVKNfN6AET9EkSb" +
		"REo6av9J#vcTlhZvgnA$qWkmqdtyetdjKSzV1TfBCyBPqaJJfAEgzF4KyI7OWdYFPgboRjf" +
		"8aq9jTMMajBoP1MqePI0sbahoa4ArtvN3wH0x9VPtrehny7exqbgTACD5NurCf7EPcIRWrQ" +
		"kRc$8Q#h$2QnHjPQleKqby$aKtBlSMrxY7Tab#oK7R9Tjicx8Jw#TZbP9Ikj$AgEVgdq62$" +
		"JMKyxhAZz15ZPExdGbFLkC$OVZLaFSWTijrETj27739hR$v3wORuEBH1WLHTWBn35Uje9eg" +
		"KYdJxIBNNOMUJWKVglQliLiAhr4R2rxUEa6QIf5Wwx3ny1zY5EBZnC7$L8#QMtrMy3qaJcL" +
		"PyylrIiVVq4M8z7iG9s2B0ETWZOMfWL5BiNnwArhUrDNmOaaMU5nSuXu86FVOH3cEucu87f" +
		"6A0zpHyF5HJtXC1qV#6HZ$sLZt3OhHZuRBV2TuCzZEbvmFxDiQXZknG$0VPIZiLTbCjJx$O" +
		"qGBkV0PC2h9y=");

	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		return null;
	}

	public IDLParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 2: // Definitions = 
			case 11: // InterfaceInheritance = 
			case 13: // InterfaceMembers = 
			case 18: // ExceptionMembers = 
			case 35: // ReadOnly = 
			case 37: // GetRaises = 
			case 39: // SetRaises = 
			case 44: // Specials = 
			case 52: // OptionalIdentifier = 
			case 54: // Raises = 
			case 57: // ArgumentList = 
			case 59: // Arguments = 
			case 62: // In = 
			case 64: // Optional = 
			case 66: // Ellipsis = 
			case 71: // ExtendedAttributeList = 
			case 73: // ExtendedAttributes = 
			case 79: // ExtendedAttributeRest = 
			case 84: // ExtendedAttributeInner = 
			case 149: // OptionalLong = 
			case 151: // Nullable = 
			case 156: // ScopedNames = 
			case 162: // ScopedNameParts = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Definitions
			case 3: // Definition = Module
			case 4: // Definition = Interface
			case 5: // Definition = Exception
			case 6: // Definition = Typedef
			case 7: // Definition = ImplementsStatement
			case 14: // InterfaceMember = Const
			case 15: // InterfaceMember = AttributeOrOperation
			case 22: // ConstExpr = BooleanLiteral
			case 23: // ConstExpr = NUM_INTEGER
			case 24: // ConstExpr = NUM_FLOAT
			case 25: // BooleanLiteral = TRUE
			case 26: // BooleanLiteral = FALSE
			case 28: // AttributeOrOperation = Attribute
			case 29: // AttributeOrOperation = Operation
			case 30: // StringifierAttributeOrOperation = Attribute
			case 31: // StringifierAttributeOrOperation = OperationRest
			case 32: // StringifierAttributeOrOperation = SEMICOLON
			case 34: // ReadOnly = READONLY
			case 42: // OmittableSpecials = Specials
			case 45: // Special = GETTER
			case 46: // Special = SETTER
			case 47: // Special = CREATOR
			case 48: // Special = DELETER
			case 49: // Special = CALLER
			case 51: // OptionalIdentifier = IDENTIFIER
			case 61: // In = IN
			case 63: // Optional = OPTIONAL
			case 65: // Ellipsis = ELLIPSIS
			case 67: // ExceptionMember = Const
			case 68: // ExceptionMember = ExceptionField
			case 78: // ExtendedAttributeRest = ExtendedAttribute
			case 85: // Other = NUM_INTEGER
			case 86: // Other = NUM_FLOAT
			case 87: // Other = IDENTIFIER
			case 88: // Other = STRING
			case 89: // Other = OTHER
			case 90: // Other = ELLIPSIS
			case 91: // Other = COLON
			case 92: // Other = DOUBLE_COLON
			case 93: // Other = SEMICOLON
			case 94: // Other = LESS_THAN
			case 95: // Other = EQUAL
			case 96: // Other = GREATER_THAN
			case 97: // Other = QUESTION
			case 98: // Other = FALSE
			case 99: // Other = OBJECT
			case 100: // Other = TRUE
			case 101: // Other = ANY
			case 102: // Other = ATTRIBUTE
			case 103: // Other = BOOLEAN
			case 104: // Other = CALLER
			case 105: // Other = CONST
			case 106: // Other = CREATOR
			case 107: // Other = DELETER
			case 108: // Other = DOUBLE
			case 109: // Other = EXCEPTION
			case 110: // Other = FLOAT
			case 111: // Other = GETRAISES
			case 112: // Other = GETTER
			case 113: // Other = IMPLEMENTS
			case 114: // Other = IN
			case 115: // Other = INTERFACE
			case 116: // Other = LONG
			case 117: // Other = MODULE
			case 118: // Other = OCTET
			case 119: // Other = OMITTABLE
			case 120: // Other = OPTIONAL
			case 121: // Other = RAISES
			case 122: // Other = SEQUENCE
			case 123: // Other = SETRAISES
			case 124: // Other = SETTER
			case 125: // Other = SHORT
			case 126: // Other = DOMSTRING
			case 127: // Other = STRINGIFIER
			case 128: // Other = TYPEDEF
			case 129: // Other = UNSIGNED
			case 130: // Other = VOID
			case 131: // OtherOrComma = Other
			case 132: // OtherOrComma = COMMA
			case 133: // Type = NullableType
			case 134: // Type = ScopedName
			case 135: // Type = ANY
			case 136: // Type = OBJECT
			case 145: // UnsignedIntegerType = IntegerType
			case 146: // IntegerType = SHORT
			case 148: // OptionalLong = LONG
			case 150: // Nullable = QUESTION
			case 152: // ReturnType = Type
			case 153: // ReturnType = VOID
			case 157: // ScopedName = AbsoluteScopedName
			case 158: // ScopedName = RelativeScopedName
			{
				return _symbols[offset + 1];
			}
			case 10: // InterfaceInheritance = COLON ScopedNameList
			case 27: // AttributeOrOperation = STRINGIFIER StringifierAttributeOrOperation
			case 36: // GetRaises = GETRAISES ExceptionList
			case 38: // SetRaises = SETRAISES ExceptionList
			case 40: // Operation = OmittableSpecials OperationRest
			case 41: // OmittableSpecials = OMITTABLE Specials
			case 43: // Specials = Special Specials
			case 53: // Raises = RAISES ExceptionList
			case 56: // ArgumentList = Argument Arguments
			case 77: // ExtendedAttribute = Other ExtendedAttributeRest
			case 83: // ExtendedAttributeInner = OtherOrComma ExtendedAttributeInner
			case 137: // NullableType = UnsignedIntegerType Nullable
			case 138: // NullableType = BOOLEAN Nullable
			case 139: // NullableType = OCTET Nullable
			case 140: // NullableType = FLOAT Nullable
			case 141: // NullableType = DOUBLE Nullable
			case 142: // NullableType = DOMSTRING Nullable
			case 144: // UnsignedIntegerType = UNSIGNED IntegerType
			case 147: // IntegerType = LONG OptionalLong
			case 154: // ScopedNameList = ScopedName ScopedNames
			case 160: // RelativeScopedName = IDENTIFIER ScopedNameParts
			{
				return _symbols[offset + 2];
			}
			case 1: // Definitions = ExtendedAttributeList Definition Definitions
			case 12: // InterfaceMembers = ExtendedAttributeList InterfaceMember InterfaceMembers
			case 17: // ExceptionMembers = ExtendedAttributeList ExceptionMember ExceptionMembers
			case 55: // ExceptionList = LPAREN ScopedNameList RPAREN
			case 58: // Arguments = COMMA Argument Arguments
			case 69: // ExceptionField = Type IDENTIFIER SEMICOLON
			case 72: // ExtendedAttributes = COMMA ExtendedAttribute ExtendedAttributes
			case 155: // ScopedNames = COMMA ScopedName ScopedNames
			case 159: // AbsoluteScopedName = DOUBLE_COLON IDENTIFIER ScopedNameParts
			case 161: // ScopedNameParts = DOUBLE_COLON IDENTIFIER ScopedNameParts
			{
				return _symbols[offset + 3];
			}
			case 19: // Typedef = TYPEDEF Type IDENTIFIER SEMICOLON
			case 20: // ImplementsStatement = ScopedName IMPLEMENTS ScopedName SEMICOLON
			case 70: // ExtendedAttributeList = LBRACKET ExtendedAttribute ExtendedAttributes RBRACKET
			case 74: // ExtendedAttribute = LPAREN ExtendedAttributeInner RPAREN ExtendedAttributeRest
			case 75: // ExtendedAttribute = LBRACKET ExtendedAttributeInner RBRACKET ExtendedAttributeRest
			case 76: // ExtendedAttribute = LCURLY ExtendedAttributeInner RCURLY ExtendedAttributeRest
			case 80: // ExtendedAttributeInner = LPAREN ExtendedAttributeInner RPAREN ExtendedAttributeInner
			case 81: // ExtendedAttributeInner = LBRACKET ExtendedAttributeInner RBRACKET ExtendedAttributeInner
			case 82: // ExtendedAttributeInner = LCURLY ExtendedAttributeInner RCURLY ExtendedAttributeInner
			{
				return _symbols[offset + 4];
			}
			case 143: // NullableType = SEQUENCE LESS_THAN Type GREATER_THAN Nullable
			{
				return _symbols[offset + 5];
			}
			case 8: // Module = MODULE IDENTIFIER LCURLY Definitions RCURLY SEMICOLON
			case 16: // Exception = EXCEPTION IDENTIFIER LCURLY ExceptionMembers RCURLY SEMICOLON
			case 21: // Const = CONST Type IDENTIFIER EQUAL ConstExpr SEMICOLON
			case 60: // Argument = ExtendedAttributeList In Optional Type Ellipsis IDENTIFIER
			{
				return _symbols[offset + 6];
			}
			case 9: // Interface = INTERFACE IDENTIFIER InterfaceInheritance LCURLY InterfaceMembers RCURLY SEMICOLON
			case 33: // Attribute = ReadOnly ATTRIBUTE Type IDENTIFIER GetRaises SetRaises SEMICOLON
			case 50: // OperationRest = ReturnType OptionalIdentifier LPAREN ArgumentList RPAREN Raises SEMICOLON
			{
				return _symbols[offset + 7];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
