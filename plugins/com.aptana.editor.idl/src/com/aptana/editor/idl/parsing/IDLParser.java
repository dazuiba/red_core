package com.aptana.editor.idl.parsing;

import java.util.ArrayList;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "IDL.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class IDLParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLmTqL4KKlVl$4Y8g9HGrAbA2c#YYYGP10c90m0HG55IgAFQAIYy20McXzzv1a2f5L52" +
		"g85sQL46GegA03HMYFk$CpeR9cYWUznnpZku$zzzvRzwyUJF$p#vTm3s5qYYEKl2X8X9H2L" +
		"LH5hSX7ZSY3XLG0tSW1jV3Zrjm4yhXPfJ1hKX2PLo3Qr4IDo0M2IYFsr47rw64Y1mBPpwyY" +
		"ixXpHZc#YB3dAyVkkNgzVxtSaLboLKCbrzahal2cEkoyEMIRy9OLu4mvYeInbnN1iyIsgjl" +
		"47IKNz46RT4EhT41BV0I8l0oNf7N48sdxJZajU8siwy#tc5i8to0RLY4jxBapCWIQsUPdsF" +
		"FNAl7zj#PW$#k7FntM$vMU00kql0mMc8nykYu9fdhteEzs8TwU0BxCO1hyI8VHpo6oKYJCn" +
		"on2lVWNjJ5VRWVjV4WyYELsLhXIJp5d0uZDg41Lj2pbjdIi5jxqcX$ZAtaVDfkY5RCzedsj" +
		"yGpXWUHeyaBUAyjhL6OkGkX89hpNfI#nfnn9wwWDngFq7SLemwZYewwcdqHI6PRSJN5iW7L" +
		"DMUWflRFHuhcQDGYBs6SIpJ7fPY5X$2yTC0OlCQg##9nwShsDBo8tj89wNgFvl1ItxTjfIr" +
		"68K8#n78Y0czZEJx43cp08In3KpJ3erWfH$02XijwF8ldC5C#agsoHPR9KdH25tING#Y9hk" +
		"X1xiLM7w8$1cCYXc0eXc4a1cA4f64qnc8ync42CHAJC0LJCHslOmQjD#HLpCOyBCIRqaCwI" +
		"Zlf8frb8zx5KhoFDNXFFiLghCDwRCGMRCT7s2LhvGDP8wjbbQp40G37S12VaW$Z23x3KNZu" +
		"$5m#yJnSLLv4yZif7$VcCfwZ$3ox1RdBKNmcHVWiYl4fNCdzZ#Q#gzDKN9#WaZoBfNdcol3" +
		"KWQShdFbKZhYmPlI5DLkbCAzNPShDw$q$ryNcYWjZhagvjAxON5gNB$Ci1JF1ogIY8tLqOQ" +
		"g4ebdY4hFC69Wbqino0nM67LiaIwpTav1ZpnrMZ#sFpS4VbuFVP$dBiYU1#gSE5S#jL48gh" +
		"bx8kk$abP#ADvA$ZJ4SKPFQ89xPrOWBl#n#xl5DL4m9Z6Z0N#juPbCHFghZijHCFdhAQa#0" +
		"ovDZjEsX7QTjkr#nNxEVLnETEv6QB47V$QpKJrMYl7ugj83FandbPxM1lY0NC5p4S89Xl#R" +
		"YZ4lGIEG#tyPV$5YzDpxkMfAkC8NAnM7Bg$SeXfVYM5x97EVZI1yvcUpmylAgoEW2McbwUA" +
		"ato#5RLqfRWIkUkkyX#fMcg41kp5O53OTlOpLgCm$VsyBKcnxEKvbLnF0UGz$jZ2X8NwgEK" +
		"FrLU3bSNM5TawgXW8QQnwVdhgNRXQWuewmQj4#4zoZa9nVYay$3Dd2yAzJ7UOKt$ZexxOZJ" +
		"0P#d5zkxoDsCFPTs1dah$vyB#IonK$K5#Za$d6ZwpXcxBksgn7LcZkh1sDm0VjgofZ7aCyQ" +
		"UI7iwwozgxFMq5z5ECkj$zEBoEjHEpa#0cq8#IIuPyBj9H0rYWB7JYAR4iyGGnYfkHhG8oJ" +
		"UFlk44JQS9UQWPFvfW$UvOOXmn$YBMd7AXxKx8skU#O7YIuTQ6fuV4pJ2izcifUHRHZ#0xv" +
		"CutVPC9xXt$yS3jRtp33FCTSqUOzcp3omYrpkh4I8BFnbrf#XOIQuW6n1JEsPlSa9XABAQz" +
		"ZhpMn2uXDXARY4x42c8BiOheICmXjfbztS5s5uBljRkJs6xydTdkRVBjDhp7MhzwBuQHDnY" +
		"xZnbtWkq3nlS9SP0uHF1zS0yJdCzH#y8pvHuXzX5xYQE46hkVE7PX7cUlOQxVMM3Qz$FMtA" +
		"gb7D$BuQPld$6vLdzUmn66emmND5pCVhR$DbXFjE4IXcCCnnhs6uutdFWtyvVxeyyP6H8JQ" +
		"VNn7NRBPpFcHok#n3zSSmkhNIEaBzLmy6pMDlnoI5nBgxRpnlUSWXNJmN2ovMjlE5sT5zFk" +
		"7f8xkETjB5#wuPvcJdMcUrar$9R3Mck6sFMpsivcTSx$ECvHPwblTZcjc1DMtc1T9$ziZ8a" +
		"v$LSnWJWS1oH3DIH3VWkuv1TaVkGp#K6EcjRtXhyZlfLtvHrvMvR8Mx9O5ib2MI1lodoP9t" +
		"DbZioMMVA6p9GPyhfCbsaoLQR8P9aa4sM2Z9TnCbR6o6WPfVCTaoyCVsxu175SDiicEI$dv" +
		"6VvINwKiu4QzVsqgUrKq1DW6I73PPXL#vTMUu$ibezbb#oK7R9Tjj6pGePARnaYVMGvhVTb" +
		"W0mc3oJtafuoYFoU6TjDt$jcvcel$OJVvxptvxqxh8#a8vkFj0cn0#lusgf$dRv$HHmWzij" +
		"1u#TthfpKhNtPPRPoybiNwTIR7gf0bm0LdPS0rQydMoIo$m8S$kDo2L0RHr0TUwbr8gYGNM" +
		"faXqewWdhJQy4XGCNg8K3jxIL0pUWIe2hs45vgDqUZFltrgT2KQluprBPmiq4TZg$3d4dCG" +
		"Rr1NUvIGNkoWPUwso4yMWChFCYsWZ#N89arrIG74Q$XK4qhUBI2hi0rLkOQAvCRSCyQ4etO" +
		"ruXsO$OtPhkg1gYr7G9Kt0u1$iFnQAJIJgMTGgPcez9sgRCLmFy9NZJz7UbpiHG=");

	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		return null;
	}

	public IDLParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 2: // Definitions = 
			case 4: // ExtendedAttributeList = 
			case 16: // ExtendedAttributes = 
			case 27: // ExtendedAttributeInner = 
			case 29: // ExtendedAttributeRest = 
			case 31: // InterfaceBody = 
			case 33: // ExceptionMembers = 
			case 54: // InterfaceInheritance = 
			case 56: // InterfaceMembers = 
			case 113: // ScopedNameParts = 
			case 115: // ScopedNames = 
			case 119: // OptionalLong = 
			case 123: // ReadOnly = 
			case 125: // GetRaises = 
			case 127: // SetRaises = 
			case 131: // Raises = 
			case 133: // ArgumentList = 
			case 136: // Arguments = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Definitions
			case 5: // Definition = Module
			case 6: // Definition = Interface
			case 7: // Definition = Exception
			case 8: // Definition = Typedef
			case 9: // Definition = Valuetype
			case 10: // Definition = Const
			case 28: // ExtendedAttributeRest = ExtendedAttribute
			case 34: // Type = DeclarationType
			case 40: // DeclarationType = UnsignedIntegerType
			case 41: // DeclarationType = ScopedName
			case 42: // DeclarationType = ANY
			case 43: // DeclarationType = BOOLEAN
			case 44: // DeclarationType = OCTET
			case 45: // DeclarationType = FLOAT
			case 46: // DeclarationType = DOMSTRING
			case 47: // DeclarationType = OBJECT
			case 48: // ConstExpr = BooleanLiteral
			case 49: // ConstExpr = NUM_INTEGER
			case 50: // ConstExpr = NUM_FLOAT
			case 51: // OtherOrComma = Other
			case 52: // OtherOrComma = COMMA
			case 58: // BoxedType = UnsignedIntegerType
			case 59: // BoxedType = ScopedName
			case 60: // BoxedType = BOOLEAN
			case 61: // BoxedType = OCTET
			case 62: // BoxedType = FLOAT
			case 65: // UnsignedIntegerType = IntegerType
			case 68: // BooleanLiteral = TRUE
			case 69: // BooleanLiteral = FALSE
			case 70: // Other = NUM_INTEGER
			case 71: // Other = NUM_FLOAT
			case 72: // Other = IDENTIFIER
			case 73: // Other = STRING
			case 74: // Other = OTHER
			case 75: // Other = COLON
			case 76: // Other = DOUBLE_COLON
			case 77: // Other = SEMICOLON
			case 78: // Other = LESS_THAN
			case 79: // Other = EQUAL
			case 80: // Other = GREATER_THAN
			case 81: // Other = DOMSTRING
			case 82: // Other = FALSE
			case 83: // Other = OBJECT
			case 84: // Other = TRUE
			case 85: // Other = ANY
			case 86: // Other = ATTRIBUTE
			case 87: // Other = BOOLEAN
			case 88: // Other = CONST
			case 89: // Other = EXCEPTION
			case 90: // Other = FLOAT
			case 91: // Other = GETRAISES
			case 92: // Other = IN
			case 93: // Other = INTERFACE
			case 94: // Other = LONG
			case 95: // Other = MODULE
			case 96: // Other = OCTET
			case 97: // Other = RAISES
			case 98: // Other = SEQUENCE
			case 99: // Other = SETRAISES
			case 100: // Other = SHORT
			case 101: // Other = TYPEDEF
			case 102: // Other = UNSIGNED
			case 103: // Other = VALUETYPE
			case 105: // InterfaceMember = Const
			case 106: // InterfaceMember = Attribute
			case 107: // InterfaceMember = Operation
			case 108: // IntegerType = SHORT
			case 111: // ScopedNameAfterColon = DOMSTRING
			case 118: // OptionalLong = LONG
			case 121: // ScopedNamePartsAfterColon = DOMSTRING
			case 122: // ReadOnly = READONLY
			case 128: // ReturnType = DeclarationType
			case 129: // ReturnType = VOID
			{
				return _symbols[offset + 1];
			}
			case 14: // ExtendedAttribute = Other ExtendedAttributeRest
			case 21: // Valuetype = VALUETYPE ValuetypeRest
			case 26: // ExtendedAttributeInner = OtherOrComma ExtendedAttributeInner
			case 36: // TypedefRest = IDENTIFIER SEMICOLON
			case 37: // TypedefRest = DOMSTRING SEMICOLON
			case 53: // InterfaceInheritance = COLON ScopedNameList
			case 64: // UnsignedIntegerType = UNSIGNED IntegerType
			case 66: // ScopedName = DOUBLE_COLON ScopedNameAfterColon
			case 67: // ScopedName = IDENTIFIER ScopedNameParts
			case 104: // ScopedNameList = ScopedName ScopedNames
			case 109: // IntegerType = LONG OptionalLong
			case 110: // ScopedNameAfterColon = IDENTIFIER ScopedNameParts
			case 112: // ScopedNameParts = DOUBLE_COLON ScopedNamePartsAfterColon
			case 120: // ScopedNamePartsAfterColon = IDENTIFIER ScopedNameParts
			case 124: // GetRaises = GETRAISES ExceptionList
			case 126: // SetRaises = SETRAISES ExceptionList
			case 130: // Raises = RAISES ExceptionList
			case 132: // ArgumentList = Argument Arguments
			{
				return _symbols[offset + 2];
			}
			case 1: // Definitions = ExtendedAttributeList Definition Definitions
			case 15: // ExtendedAttributes = COMMA ExtendedAttribute ExtendedAttributes
			case 20: // Typedef = TYPEDEF Type TypedefRest
			case 32: // ExceptionMembers = ExtendedAttributeList ExceptionMember ExceptionMembers
			case 38: // ValuetypeRest = IDENTIFIER BoxedType SEMICOLON
			case 55: // InterfaceMembers = ExtendedAttributeList InterfaceMember InterfaceMembers
			case 57: // ExceptionMember = DeclarationType IDENTIFIER SEMICOLON
			case 114: // ScopedNames = COMMA ScopedName ScopedNames
			case 134: // ExceptionList = LPAREN ScopedNameList RPAREN
			case 135: // Arguments = COMMA Argument Arguments
			{
				return _symbols[offset + 3];
			}
			case 3: // ExtendedAttributeList = LBRACKET ExtendedAttribute ExtendedAttributes RBRACKET
			case 11: // ExtendedAttribute = LPAREN ExtendedAttributeInner RPAREN ExtendedAttributeRest
			case 12: // ExtendedAttribute = LBRACKET ExtendedAttributeInner RBRACKET ExtendedAttributeRest
			case 13: // ExtendedAttribute = LCURLY ExtendedAttributeInner RCURLY ExtendedAttributeRest
			case 18: // Interface = INTERFACE IDENTIFIER InterfaceBody SEMICOLON
			case 23: // ExtendedAttributeInner = LPAREN ExtendedAttributeInner RPAREN ExtendedAttributeInner
			case 24: // ExtendedAttributeInner = LBRACKET ExtendedAttributeInner RBRACKET ExtendedAttributeInner
			case 25: // ExtendedAttributeInner = LCURLY ExtendedAttributeInner RCURLY ExtendedAttributeInner
			case 30: // InterfaceBody = InterfaceInheritance LCURLY InterfaceMembers RCURLY
			case 35: // Type = SEQUENCE LESS_THAN Type GREATER_THAN
			case 63: // BoxedType = SEQUENCE LESS_THAN Type GREATER_THAN
			case 137: // Argument = ExtendedAttributeList IN DeclarationType IDENTIFIER
			{
				return _symbols[offset + 4];
			}
			case 17: // Module = MODULE IDENTIFIER LCURLY Definitions RCURLY SEMICOLON
			case 19: // Exception = EXCEPTION IDENTIFIER LCURLY ExceptionMembers RCURLY SEMICOLON
			case 22: // Const = CONST DeclarationType IDENTIFIER EQUAL ConstExpr SEMICOLON
			{
				return _symbols[offset + 6];
			}
			case 39: // ValuetypeRest = DOMSTRING SEQUENCE LESS_THAN UNSIGNED SHORT GREATER_THAN SEMICOLON
			case 116: // Attribute = ReadOnly ATTRIBUTE DeclarationType IDENTIFIER GetRaises SetRaises SEMICOLON
			case 117: // Operation = ReturnType IDENTIFIER LPAREN ArgumentList RPAREN Raises SEMICOLON
			{
				return _symbols[offset + 7];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
