package com.aptana.editor.dtd.parsing;

import java.util.ArrayList;
import com.aptana.editor.dtd.parsing.ast.*;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "DTD.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class DTDParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oTbNTmLKKKXt$lfgW920IHA4r4J24X4D1K4z8mg2WeYY0Mx0HYGJGY820AmepEw8p#fuw" +
		"E514GGK2G9ehOUo$OkrYm8BRZT$TjCiapP1xUEz$#pjazMyxTVMybxT1yNQ149Ui07QY3D5" +
		"6JbA0WfkOe3L2cSjHBPzi$AbQPsjb2dQPHEbrdQBJEr1YDDLEghbMbwdMeafIYBkgapXgc8" +
		"vJVr3BSjOpGI9sgipJEFb1xTR1tLArQbQXKnwbSGrIXgUgkazL39#ea3TJ1EjRDtqTzTRGo" +
		"r5LPobO$vQg$yZH7XNvrONcCAmjSMQJfcgVUEbn7QZRl85t56sOJqb67DTaXTRfSWpMKbPo" +
		"d6SnzaSvN3NqliK$j1Tsi2KhJ8RfQb#fAHcbGkdrY7#iwTREFTBnwsllsdhrhRzjRkidUr0" +
		"cgqaoDrpawHUVgObsc2tM59kiQJT4qUr7Ns$EIPjcZcijOD#X6UywU9QS4dzK0yivdnVt8g" +
		"6LDG4m6#MMnVZahOFvUVEVUvDc7NCAl9BvQ1tBiH0QTMNU2#xe5x5v9KqkIQwbWPwhOWHf5" +
		"sBckb156ZEv#j0pFGpTEH0$rn8fWHUUFjgQrY4rdtwEj$osJUCEJbSmPIC5gpnkuyvR0g6b" +
		"DTaWEEzp5hIGHAvaoaLEGxEQFKDFEQGfQnYYfx5pebnCVeM$WlEWx10gfwKvC0Yi8sEF0zq" +
		"#YPwX5Yd1#exrINKneIGjcoJtfq3Uqsu8dt95i6EdzwLxly7gdruvG2tV19BWRxl5jzy9zt" +
		"XuEzTvky3eYPivHCVxe67#grybUPtYTwNMsrpAu7nR28gY0nR04biA3KEbZvpMERyO$WfJV" +
		"V4uVioosBbvubiDAcElzndru0EPx#vOs#g#2Ms6DzzTwNU5rDTpcxM5G1#kzlm5kXusm2RR" +
		"0PbW7ss0YRFMnJyBsPj$Y3TWPJux4xOuZPXSo8OwuFSropurd$bXuIcFySg#DUrwp7sEDyT" +
		"hGR8rxaId$Psrnp3UjbRhwEFkEsuzvniVuSzg8hTj7$OAesD$sf$rXU#rtssE$sQ##zXVu6" +
		"NR3Jshss8UktEdAP#1fMsThROqzOgjjbJriA#qXMs7BRHbjJy5su7pQ3dX2hJps8$nWtplx" +
		"AtlLNh6NiLxY5BzkhzasUzossXRRR9jieprc6sozxyS$WIrr5hz7MsABRP7jik$iMz$#3Nm" +
		"DdpllCr$xPQjh#CALVr6CvHQBWBZn0eXmzqN9RON#Icn17l$jUGhlY00Yt9PH1b8NaaDxFZ" +
		"g8V$TiOhBnoz1ITpCcEXti2BWd8n0qewLVWDz8OGi2Rg289t0tJqW6unSpTZ5rcMWcVWbQW" +
		"bz1UsKRL7cAYCr2ivmsqhPVpJpLv5l3N3NOGztT5r7jluRvdEu=");

	private DTDScanner _scanner;
	
	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		// grab source
		char[] characters = parseState.getSource();

		// make sure we have some source
		String source = (characters != null) ? new String(characters) : "";

		// send source to the scanner
		this._scanner.setSource(source);

		// parse
		IParseNode result = (IParseNode) parse(this._scanner);
		
		// save reference to result
		parseState.setParseResult(result);
		
		return result;
	}

	public DTDParser() {
		super(PARSING_TABLES);


		this._scanner = new DTDScanner();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // DTD = Declarations.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final ArrayList _list_d = (ArrayList) _symbol_d.value;
					final beaver.Symbol[] d = _list_d == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_d.toArray(new beaver.Symbol[_list_d.size()]);
					
		return new DTDParseRootNode(d);
			}
			case 1: // DTD = 
			{
					
		return new DTDParseRootNode();
			}
			case 2: // Declarations = Declarations Declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 3: // Declarations = Declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 10: // MarkupDecl = PI.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final String p = (String) _symbol_p.value;
					
		String content = p.substring(2, p.length() - 2);
		
		return new DTDProcessingInstructionNode(content);
			}
			case 11: // ElementDecl = ELEMENT NAME.n EMPTY GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDElementDeclarationNode(n);
			}
			case 12: // ElementDecl = ELEMENT NAME.n ANY GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDElementDeclarationNode(n);
			}
			case 13: // ElementDecl = ELEMENT NAME.n Mixed GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDElementDeclarationNode(n);
			}
			case 14: // ElementDecl = ELEMENT NAME.n Children GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDElementDeclarationNode(n);
			}
			case 15: // AttlistDecl = ATTLIST NAME.n GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDAttributeListDeclarationNode(n);
			}
			case 16: // AttlistDecl = ATTLIST NAME.n AttDefs GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDAttributeListDeclarationNode(n);
			}
			case 17: // AttDefs = AttDefs AttDef
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 18: // AttDefs = AttDef
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 21: // NotationDecl = NOTATION NAME.n ExternalID GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDNotationDeclarationNode(n);
			}
			case 22: // NotationDecl = NOTATION NAME.n PublicID GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDNotationDeclarationNode(n);
			}
			case 24: // GEDecl = ENTITY NAME.n EntityDef GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
		return new DTDGEntityDeclarationNode(n);
			}
			case 25: // PEDecl = ENTITY PERCENT NAME.n PEDef GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					
		return new DTDPEntityDeclarationNode(n);
			}
			case 88: // NmTokens = NmTokens NMTOKEN
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 89: // NmTokens = NMTOKEN
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 4: // Declaration = MarkupDecl
			case 5: // Declaration = PE_REF
			case 6: // MarkupDecl = ElementDecl
			case 7: // MarkupDecl = AttlistDecl
			case 8: // MarkupDecl = EntityDecl
			case 9: // MarkupDecl = NotationDecl
			case 19: // EntityDecl = GEDecl
			case 20: // EntityDecl = PEDecl
			case 34: // Children = Choice
			case 38: // Children = Seq
			case 42: // AttType = StringType
			case 43: // AttType = TokenizedType
			case 44: // AttType = EnumeratedType
			case 45: // DefaultDecl = REQUIRED
			case 46: // DefaultDecl = IMPLIED
			case 47: // DefaultDecl = STRING
			case 49: // EntityDef = STRING
			case 50: // EntityDef = ExternalID
			case 52: // PEDef = STRING
			case 53: // PEDef = ExternalID
			case 61: // StringType = CDATA_TYPE
			case 62: // TokenizedType = ID_TYPE
			case 63: // TokenizedType = IDREF_TYPE
			case 64: // TokenizedType = IDREFS_TYPE
			case 65: // TokenizedType = ENTITY_TYPE
			case 66: // TokenizedType = ENTITIES_TYPE
			case 67: // TokenizedType = NMTOKEN_TYPE
			case 68: // TokenizedType = NMTOKENS_TYPE
			case 69: // EnumeratedType = NotationType
			case 70: // EnumeratedType = Enumeration
			case 72: // Cp = NAME
			case 76: // Cp = Choice
			case 80: // Cp = Seq
			{
				return _symbols[offset + 1];
			}
			case 26: // ExternalID = SYSTEM SYSTEM_LITERAL
			case 28: // PublicID = PUBLIC STRING
			case 33: // Names = PIPE NAME
			case 35: // Children = Choice QUESTION
			case 36: // Children = Choice STAR
			case 37: // Children = Choice PLUS
			case 39: // Children = Seq QUESTION
			case 40: // Children = Seq STAR
			case 41: // Children = Seq PLUS
			case 48: // DefaultDecl = FIXED STRING
			case 51: // EntityDef = ExternalID NDataDecl
			case 56: // ChoiceCps = PIPE Cp
			case 60: // SeqCps = COMMA Cp
			case 71: // NDataDecl = NDATA NAME
			case 73: // Cp = NAME QUESTION
			case 74: // Cp = NAME STAR
			case 75: // Cp = NAME PLUS
			case 77: // Cp = Choice QUESTION
			case 78: // Cp = Choice STAR
			case 79: // Cp = Choice PLUS
			case 81: // Cp = Seq QUESTION
			case 82: // Cp = Seq STAR
			case 83: // Cp = Seq PLUS
			{
				return _symbols[offset + 2];
			}
			case 23: // AttDef = NAME AttType DefaultDecl
			case 27: // ExternalID = PUBLIC STRING SYSTEM_LITERAL
			case 29: // Mixed = LPAREN PCDATA RPAREN_STAR
			case 31: // Mixed = LPAREN PCDATA RPAREN
			case 32: // Names = Names PIPE NAME
			case 55: // ChoiceCps = ChoiceCps PIPE Cp
			case 57: // Seq = LPAREN Cp RPAREN
			case 59: // SeqCps = SeqCps COMMA Cp
			case 86: // Enumeration = LPAREN NMTOKEN RPAREN
			{
				return _symbols[offset + 3];
			}
			case 30: // Mixed = LPAREN PCDATA Names RPAREN_STAR
			case 54: // Choice = LPAREN Cp ChoiceCps RPAREN
			case 58: // Seq = LPAREN Cp SeqCps RPAREN
			case 84: // NotationType = NOTATION_TYPE LPAREN NAME RPAREN
			case 87: // Enumeration = LPAREN NMTOKEN NmTokens RPAREN
			{
				return _symbols[offset + 4];
			}
			case 85: // NotationType = NOTATION_TYPE LPAREN NAME Names RPAREN
			{
				return _symbols[offset + 5];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
