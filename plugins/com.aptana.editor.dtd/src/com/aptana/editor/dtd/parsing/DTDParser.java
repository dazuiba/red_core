package com.aptana.editor.dtd.parsing;

import java.util.ArrayList;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "DTD.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class DTDParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oTbGTmL5KKXl$tTXCLI4J4650W5eG4Ge0GI0CXf0c8OaS4qIWM41LfAaWLmT4P7Hr7Pnn" +
		"dL8g5Ahqe22fYxmgAbMB1tb7v$T$TixfPbsNntVdkAVUySykxkmV05ip4nGWZ7OVWK1o6Ap" +
		"4S8VXndYlu0LgX4ox0I1AbA4CvAZaRP#1Cd8MpSGxEnNaOY75eX5uOWMkGXWPe#8zTQtO9k" +
		"kC45A0V9l0zd8RJCG3dOn1wu6JqH5CtrWRjq1AP$1HDS2HEHKTSZoBqGLySWx4ureqVxoAF" +
		"GcCSuRHkoCA9Q8sJq1Qvo4DxvAE3PGhwBgxlwlfYt8WPo44p78V9QfqnIYt88lWIij4RDQW" +
		"I5#8MpNS9BaAXeeTXF39mE2xdL$mIet4Ply0eVewZSHC$uSVy2DFH72tuFhTXAhVoNRx3jr" +
		"6D2fo2eHYC$XY2It4LhiQrk05Z#3BgC17NyKLCmIIknCtQtJI#m2rQVKYhBz3EEsbrXLfzU" +
		"wszlYSVdliAsTeHx4jrqqmvsbLmEf7JQ8DChJWufHuwowOwiQXTR7PmNhxcIrCUJpklrCwh" +
		"jVT8nf0RYvnfTuq7NwcvxaOltOwMkX5XVTDq6myYc#cyMZWjIrylaYEsZqJ#jqzJ2svSkcv" +
		"90saPQhxDxYcJ9yrpjxATOi9gMKxwpjz8U7ela1cYI3V5Swt28Znz9SzQlZmbYWdsxEjc#k" +
		"PFSvbAjIFFZGI#XYQ1MPFXdXoH7UW7Gi$TeaBSO$QzuZvnltX0L8e1ua4nLZmaPblimsAEw" +
		"Vt4EDExcXmSDzVGEBikpXveSeB98IQdc9nciecO9nuHZuaoyRYOBnQ8XMAcnTuQpKzodqHH" +
		"WZDO5EzB5JsBnLByU$QtcrmYRZFzZYJlBnTtYfLchpAvpEGAqTVqkyHeiThijMA6M2ysY8r" +
		"YdLWZdX5Zn2QBVKviZZcBjyJsWzXdPfAn737yG3aqtzQOTpgcEdVSN5LnTgt9w1drJpMNrh" +
		"FJtfaQuzihCVx$h2s5jKzCu1kPubht7CGyZUFiwKbYw$RZdnKHtCS$#GVtydV#nb$v2tys$" +
		"qz8yF13rszt$VDYCrTmEPTnAP$W4Yxc8Yxa0iwdVgryLkYMSfFGxUJ6X1b$53$mUwVlvkjy" +
		"ZQzAUqNtzqs#mQUvWUlv59$aEgxb6gxcAdjF$mjyr6dwb#0ypkKSViTl#OsDVotsY1tE#io" +
		"yknAkOQVh$r8tIDNBKvtpXQUA5w73VYX0MDKm9CAgUxxmL1iZT9Ol8AXOiUGhlb3#BgxQ#I" +
		"AakkYhgeL4sCaYXwywvma$XlfsiUme9VNmLHqzmzV$l#Teg$nbobqcNwvahknooNBPlJLUc" +
		"OGgerInUP9vJaP9RbThdchjjqPprKYlTJNFGv#$0R#SdMO=");

	private DTDScanner _scanner;
	
	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		// grab source
		char[] characters = parseState.getSource();

		// make sure we have some source
		String source = (characters != null) ? new String(characters) : "";

		// send source to the scanner
		this._scanner.setSource(source);

		// parse
		return (IParseNode) parse(this._scanner);
	}

	public DTDParser() {
		super(PARSING_TABLES);


		this._scanner = new DTDScanner();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 1: // Declarations = Declarations Declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 2: // Declarations = Declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 14: // AttDefs = AttDefs AttDef
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 15: // AttDefs = AttDef
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 89: // NmTokens = NmTokens NMTOKEN
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 90: // NmTokens = NMTOKEN
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 0: // DTD = Declarations
			case 3: // Declaration = MarkupDecl
			case 4: // Declaration = PE_REF
			case 5: // MarkupDecl = ElementDecl
			case 6: // MarkupDecl = AttlistDecl
			case 7: // MarkupDecl = EntityDecl
			case 8: // MarkupDecl = NotationDecl
			case 9: // MarkupDecl = PI
			case 10: // MarkupDecl = COMMENT
			case 16: // EntityDecl = GEDecl
			case 17: // EntityDecl = PEDecl
			case 20: // ContentSpec = EMPTY
			case 21: // ContentSpec = ANY
			case 22: // ContentSpec = Mixed
			case 23: // ContentSpec = Children
			case 35: // Children = Choice
			case 39: // Children = Seq
			case 43: // AttType = StringType
			case 44: // AttType = TokenizedType
			case 45: // AttType = EnumeratedType
			case 46: // DefaultDecl = REQUIRED
			case 47: // DefaultDecl = IMPLIED
			case 48: // DefaultDecl = STRING
			case 50: // EntityDef = STRING
			case 51: // EntityDef = ExternalID
			case 53: // PEDef = STRING
			case 54: // PEDef = ExternalID
			case 62: // StringType = CDATA_TYPE
			case 63: // TokenizedType = ID_TYPE
			case 64: // TokenizedType = IDREF_TYPE
			case 65: // TokenizedType = IDREFS_TYPE
			case 66: // TokenizedType = ENTITY_TYPE
			case 67: // TokenizedType = ENTITIES_TYPE
			case 68: // TokenizedType = NMTOKEN_TYPE
			case 69: // TokenizedType = NMTOKENS_TYPE
			case 70: // EnumeratedType = NotationType
			case 71: // EnumeratedType = Enumeration
			case 73: // Cp = NAME
			case 77: // Cp = Choice
			case 81: // Cp = Seq
			{
				return _symbols[offset + 1];
			}
			case 27: // ExternalID = SYSTEM SYSTEM_LITERAL
			case 29: // PublicID = PUBLIC STRING
			case 34: // Names = PIPE NAME
			case 36: // Children = Choice QUESTION
			case 37: // Children = Choice STAR
			case 38: // Children = Choice PLUS
			case 40: // Children = Seq QUESTION
			case 41: // Children = Seq STAR
			case 42: // Children = Seq PLUS
			case 49: // DefaultDecl = FIXED STRING
			case 52: // EntityDef = ExternalID NDataDecl
			case 57: // ChoiceCps = PIPE Cp
			case 61: // SeqCps = COMMA Cp
			case 72: // NDataDecl = NDATA NAME
			case 74: // Cp = NAME QUESTION
			case 75: // Cp = NAME STAR
			case 76: // Cp = NAME PLUS
			case 78: // Cp = Choice QUESTION
			case 79: // Cp = Choice STAR
			case 80: // Cp = Choice PLUS
			case 82: // Cp = Seq QUESTION
			case 83: // Cp = Seq STAR
			case 84: // Cp = Seq PLUS
			{
				return _symbols[offset + 2];
			}
			case 12: // AttlistDecl = ATTLIST NAME GREATER_THAN
			case 24: // AttDef = NAME AttType DefaultDecl
			case 28: // ExternalID = PUBLIC STRING SYSTEM_LITERAL
			case 30: // Mixed = LPAREN PCDATA RPAREN_STAR
			case 32: // Mixed = LPAREN PCDATA RPAREN
			case 33: // Names = Names PIPE NAME
			case 56: // ChoiceCps = ChoiceCps PIPE Cp
			case 58: // Seq = LPAREN Cp RPAREN
			case 60: // SeqCps = SeqCps COMMA Cp
			case 87: // Enumeration = LPAREN NMTOKEN RPAREN
			{
				return _symbols[offset + 3];
			}
			case 11: // ElementDecl = ELEMENT NAME ContentSpec GREATER_THAN
			case 13: // AttlistDecl = ATTLIST NAME AttDefs GREATER_THAN
			case 18: // NotationDecl = NOTATION NAME ExternalID GREATER_THAN
			case 19: // NotationDecl = NOTATION NAME PublicID GREATER_THAN
			case 25: // GEDecl = ENTITY NAME EntityDef GREATER_THAN
			case 31: // Mixed = LPAREN PCDATA Names RPAREN_STAR
			case 55: // Choice = LPAREN Cp ChoiceCps RPAREN
			case 59: // Seq = LPAREN Cp SeqCps RPAREN
			case 85: // NotationType = NOTATION_TYPE LPAREN NAME RPAREN
			case 88: // Enumeration = LPAREN NMTOKEN NmTokens RPAREN
			{
				return _symbols[offset + 4];
			}
			case 26: // PEDecl = ENTITY PERCENT NAME PEDef GREATER_THAN
			case 86: // NotationType = NOTATION_TYPE LPAREN NAME Names RPAREN
			{
				return _symbols[offset + 5];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
