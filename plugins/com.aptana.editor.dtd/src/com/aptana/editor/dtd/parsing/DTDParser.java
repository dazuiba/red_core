package com.aptana.editor.dtd.parsing;

import java.util.ArrayList;
import com.aptana.editor.dtd.parsing.ast.*;
import beaver.*;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.parsing.IParseState;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "DTD.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class DTDParser extends Parser implements IParser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oTLcTu55KKFREJ3GWYAIGXH4E7O188SI4nrOI0AQAYs1MmOGMnOHTGmKAp82X$h15ZGLG" +
		"K5H5550LKB4X0GL2gXQAWW93hcRTtTJExYPlCVEUTMzwzxxwoEm#mkc06KX65QBH0Ino1Lh" +
		"W6Oz06Hy53JwUmdl78G1PYq1Kpv8cmFHw3ZRYm7XkNDM0V4jQUZ0lDQ5tG4$SY1MVXR9o3S" +
		"t4UpiS562PrE0ttu1ISYbZ4uowqnUqOX6lXHMiSAM9Yfx3Ic$20snkYTqD$Z0knbkCaJ0Yn" +
		"5g4KiqAiWt4z7aSQ#i67eJW3Ps8uHiWEt8W49CaMd80yKr4PZaS1ZaKx5AC4lT410p0GsUY" +
		"5T3o8xiX47oJAh#YBuqp$ev5lk0SAEPiqpiR7DiUqQMmT7issahLMSAsEmKXSWYjm5N9njx" +
		"o7Mt0ROzhZ3ZoAJh9JVaD7ZCBLw2pRPPjibStoa$o8Aap3YJWPf#DYN8HBSIKkntMu0MCn2" +
		"NVYPjoAYRWFzsCg9ijBp3WT3#CXF8APhDVBYhDORpOhzd7#$LbTBcUPoNCGtfFE6NauzqpM" +
		"t52i5TQJoPCItcw7jKTn$GAZMQoqAtUwEzUo9rUj5tS1N0qRdRbkoTo9m0bqzjCvWJ2nyOn" +
		"DuE$1xNNhXJmPiI5MYsE7MfsyeLRdZCIolvTr3#9#b7D7AvbX8Cz86JcQA#f4HhEY9BOMps" +
		"0CEKNPQMr6EsofDz3VuJXoFFCdCBz$50$VACFvR9rQYua2#lnl4ZMBCJPZB9wjLEQmJ2Nj#" +
		"7gC77ZpUSeyFDEsoLd0CnNeaOT4McrAfOHjh4wRPxo9NEVPus6UuSHeHsuA#7GWgfpzKdsH" +
		"yWhblSfpY274IcA$Y1mYxoCE48U2ybKJIrLUexp0DUP2bxxOfQzJhbLUhxn1UPFoFAAE470" +
		"n#CmdKx0yX4ruQPkkVRS4vVSH9Q5hOKMxRP62iIs8bXIswHXRbGyIsrNUqKXy6pO$aDkg7g" +
		"CSgnp7PhVcMKiS9iQgFa5v9p6CVHDK7wgnIShj2UwtnNDZ9HCfD7v4JbL$nw1wMhEPedbc1" +
		"UpSzw#9kkQj4SRyNn$ctaMQ6q6kyY2vHpFhANFfKvMhbMkQaAj6UNcGRIInh3crHJ3UgZ2s" +
		"9H76ZchAMDoJZHhNAYX7RP2yEe8nDpUIVu$sILIUxISvB7$BGJaW##Kl#LFsoLxvGwhbMVN" +
		"#JkmXTXExu7ha5$dPy2PYewoJjL8hQ#HRMItVy0n$9L$AAlc2lWt4Uk9xWhy$#SwToMJvdF" +
		"XCLXhvOtb7tfQtA2sGHVAkB9GtvGsPBw$BQ$Agp9DNPAwyh74l4YyOgOPuNkR8Sx92bikdw" +
		"l#4M4QyRxJ5Qds6U5fb$ZvbAV6Xgw8bn0VcNnZo5F4aXH6y5LW4U0$m49Qv3GJGfm7qHLGz" +
		"333m4ZQ$HGuiymqjOyx$K5zFPqmX#nPIpY1dK2yY5#dzeRVX01hNincNpVXYyqsrU2lnmqU" +
		"RWtpw#v7zyFA#uaUU#IxQ$EPxU1#m$aL9FNXuFx1uGsWOvOfIzgtW61NCNScybPIhQAkYBq" +
		"kHGriE$SvzAPSy#1yuiDiq");

	private DTDScanner _scanner;
	
	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	@Override
	public synchronized IParseNode parse(IParseState parseState) throws java.lang.Exception
	{
		// grab source
		char[] characters = parseState.getSource();

		// make sure we have some source
		String source = (characters != null) ? new String(characters) : "";

		// send source to the scanner
		this._scanner.setSource(source);

		// parse
		IParseNode result = (IParseNode) parse(this._scanner);
		
		// save reference to result
		parseState.setParseResult(result);
		
		return result;
	}
	
	protected void addChildren(IParseNode node, ArrayList children)
	{
		if (node != null && children != null)
		{
			for (Object child : children)
			{
				if (node instanceof IParseNode)
				{
					node.addChild((IParseNode) child);
				}
			}
		}
	}

	public DTDParser() {
		super(PARSING_TABLES);


		this._scanner = new DTDScanner();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // DTD = Declarations.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final ArrayList _list_d = (ArrayList) _symbol_d.value;
					final beaver.Symbol[] d = _list_d == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_d.toArray(new beaver.Symbol[_list_d.size()]);
					
		return new DTDParseRootNode(d);
			}
			case 1: // DTD = 
			{
					
		return new DTDParseRootNode();
			}
			case 2: // Declarations = Declarations Declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 3: // Declarations = Declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 11: // MarkupDecl = PI.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final String p = (String) _symbol_p.value;
					
		String content = p.substring(2, p.length() - 2);
		
		return new DTDProcessingInstructionNode(content);
			}
			case 13: // ElementDecl = ELEMENT NAME.n EMPTY GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			DTDNode decl = new DTDElementDeclNode(n);
			
			decl.addChild(new DTDEmptyNode());
			
			return decl;
			}
			case 14: // ElementDecl = ELEMENT NAME.n ANY GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			DTDNode decl = new DTDElementDeclNode(n);
			
			decl.addChild(new DTDAnyNode());
			
			return decl;
			}
			case 15: // ElementDecl = ELEMENT NAME.n Mixed.m GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final DTDNode m = (DTDNode) _symbol_m.value;
					
			DTDNode decl = new DTDElementDeclNode(n);
			
			decl.addChild(m);
			
			return decl;
			}
			case 16: // ElementDecl = ELEMENT NAME.n Children.c GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final ArrayList c = (ArrayList) _symbol_c.value;
					
			DTDNode decl = new DTDElementDeclNode(n);
			
			this.addChildren(decl, c);
			
			return decl;
			}
			case 17: // Mixed = LPAREN PCDATA RPAREN STAR
			{
					
			DTDPCDataNode data = new DTDPCDataNode();
			DTDZeroOrMoreNode zom = new DTDZeroOrMoreNode();
			
			zom.addChild(data);
			
			return zom;
			}
			case 18: // Mixed = LPAREN PCDATA Names.n RPAREN STAR
			{
					final Symbol _symbol_n = _symbols[offset + 3];
					final ArrayList n = (ArrayList) _symbol_n.value;
					
			DTDPCDataNode data = new DTDPCDataNode();
			DTDZeroOrMoreNode zom = new DTDZeroOrMoreNode();
			
			zom.addChild(data);
			this.addChildren(zom, n);
			
			return zom;
			}
			case 19: // Mixed = LPAREN PCDATA RPAREN
			{
					
			return new DTDPCDataNode();
			}
			case 20: // Names = Names PIPE NAME
			{
					
			String name = (String) _symbols[offset + 3].value;
			DTDElementNode element = new DTDElementNode(name);
			((ArrayList) _symbols[offset + 1].value).add(element);
			
			return _symbols[offset + 1];
			}
			case 21: // Names = NAME
			{
					
			ArrayList lst = new ArrayList();
			String name = (String) _symbols[offset + 1].value;
			DTDElementNode element = new DTDElementNode(name);
			
			lst.add(element);
			
			return new Symbol(lst);
			}
			case 27: // Children = Seq QUESTION
			{
					
			ArrayList seq = (ArrayList) _symbols[offset + 1].value;
			DTDOptionalNode result = new DTDOptionalNode();
			
			this.addChildren(result, seq);
			
			ArrayList lst = new ArrayList();
			lst.add(result);
			return new Symbol(lst);
			}
			case 28: // Children = Seq.s STAR
			{
					final Symbol s = _symbols[offset + 1];
					
			ArrayList seq = (ArrayList) _symbols[offset + 1].value;
			DTDZeroOrMoreNode result = new DTDZeroOrMoreNode();
			
			this.addChildren(result, seq);
			
			ArrayList lst = new ArrayList();
			lst.add(result);
			return new Symbol(lst);
			}
			case 29: // Children = Seq.s PLUS
			{
					final Symbol s = _symbols[offset + 1];
					
			ArrayList seq = (ArrayList) _symbols[offset + 1].value;
			DTDOneOrMoreNode result = new DTDOneOrMoreNode();
			
			this.addChildren(result, seq);
			
			ArrayList lst = new ArrayList();
			lst.add(result);
			return new Symbol(lst);
			}
			case 33: // Seq = LPAREN Cp.c RPAREN
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final DTDNode c = (DTDNode) _symbol_c.value;
					
			ArrayList lst = new ArrayList();
			
			lst.add(_symbols[offset + 2]);
			
			return new Symbol(lst);
			}
			case 34: // Seq = LPAREN Cp.c SeqCps.l RPAREN
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final DTDNode c = (DTDNode) _symbol_c.value;
					final Symbol l = _symbols[offset + 3];
					
			((ArrayList) _symbols[offset + 3].value).add(0, c);
			
			return _symbols[offset + 3];
			}
			case 35: // SeqCps = SeqCps.l COMMA Cp.c
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 3];
					final DTDNode c = (DTDNode) _symbol_c.value;
					
			((ArrayList) _symbols[offset + 1].value).add(c);
			
			return _symbols[offset + 1];
			}
			case 36: // SeqCps = COMMA Cp.c
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final DTDNode c = (DTDNode) _symbol_c.value;
					
			ArrayList lst = new ArrayList();
			
			lst.add(_symbols[offset + 2]);
			
			return new Symbol(lst);
			}
			case 37: // Cp = NAME.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					
			return new DTDElementNode(n);
			}
			case 38: // Cp = NAME.n QUESTION
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					
			DTDOptionalNode node = new DTDOptionalNode();
			
			node.addChild(new DTDElementNode(n));
			}
			case 39: // Cp = NAME.n STAR
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					
			DTDZeroOrMoreNode node = new DTDZeroOrMoreNode();
			
			node.addChild(new DTDElementNode(n));
			}
			case 40: // Cp = NAME.n PLUS
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					
			DTDOneOrMoreNode node = new DTDOneOrMoreNode();
			
			node.addChild(new DTDElementNode(n));
			}
			case 49: // AttlistDecl = ATTLIST NAME.n GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDAttListDeclNode(n);
			}
			case 50: // AttlistDecl = ATTLIST NAME.n AttDefs GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDAttListDeclNode(n);
			}
			case 51: // AttDefs = AttDefs AttDef
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 52: // AttDefs = AttDef
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 55: // NotationDecl = NOTATION NAME.n ExternalID GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDNotationDeclNode(n);
			}
			case 56: // NotationDecl = NOTATION NAME.n PublicID GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDNotationDeclNode(n);
			}
			case 58: // GEDecl = ENTITY NAME.n STRING GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDGeneralEntityDeclNode(n);
			}
			case 59: // GEDecl = ENTITY NAME.n ExternalID GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDGeneralEntityDeclNode(n);
			}
			case 60: // GEDecl = ENTITY NAME.n ExternalID NDataDecl GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					
			return new DTDGeneralEntityDeclNode(n);
			}
			case 61: // PEDecl = ENTITY PERCENT NAME.n STRING.s GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final String s = (String) _symbol_s.value;
					
			String value = s.substring(1, s.length() - 1);
			this._scanner.register(n, value);
			
			return new DTDParsedEntityDeclNode(n);
			}
			case 62: // PEDecl = ENTITY PERCENT NAME.n ExternalID GREATER_THAN
			{
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					
			return new DTDParsedEntityDeclNode(n);
			}
			case 88: // NmTokens = NmTokens NMTOKEN
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 89: // NmTokens = NMTOKEN
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 4: // Declaration = MarkupDecl
			case 5: // Declaration = PE_REF
			case 6: // Declaration = ConditionalSect
			case 7: // MarkupDecl = ElementDecl
			case 8: // MarkupDecl = AttlistDecl
			case 9: // MarkupDecl = EntityDecl
			case 10: // MarkupDecl = NotationDecl
			case 12: // MarkupDecl = COMMENT
			case 22: // Children = Choice
			case 26: // Children = Seq
			case 41: // Cp = Choice
			case 45: // Cp = Seq
			case 53: // EntityDecl = GEDecl
			case 54: // EntityDecl = PEDecl
			case 66: // AttType = StringType
			case 67: // AttType = TokenizedType
			case 68: // AttType = EnumeratedType
			case 69: // DefaultDecl = REQUIRED
			case 70: // DefaultDecl = IMPLIED
			case 71: // DefaultDecl = STRING
			case 73: // StringType = CDATA_TYPE
			case 74: // TokenizedType = ID_TYPE
			case 75: // TokenizedType = IDREF_TYPE
			case 76: // TokenizedType = IDREFS_TYPE
			case 77: // TokenizedType = ENTITY_TYPE
			case 78: // TokenizedType = ENTITIES_TYPE
			case 79: // TokenizedType = NMTOKEN_TYPE
			case 80: // TokenizedType = NMTOKENS_TYPE
			case 81: // EnumeratedType = NotationType
			case 82: // EnumeratedType = Enumeration
			case 90: // ConditionalSect = IncludeSect
			case 91: // ConditionalSect = IgnoreSect
			{
				return _symbols[offset + 1];
			}
			case 23: // Children = Choice QUESTION
			case 24: // Children = Choice STAR
			case 25: // Children = Choice PLUS
			case 32: // ChoiceCps = PIPE Cp
			case 42: // Cp = Choice QUESTION
			case 43: // Cp = Choice STAR
			case 44: // Cp = Choice PLUS
			case 46: // Cp = Seq QUESTION
			case 47: // Cp = Seq STAR
			case 48: // Cp = Seq PLUS
			case 63: // ExternalID = SYSTEM STRING
			case 65: // PublicID = PUBLIC STRING
			case 72: // DefaultDecl = FIXED STRING
			case 83: // NDataDecl = NDATA NAME
			{
				return _symbols[offset + 2];
			}
			case 31: // ChoiceCps = ChoiceCps PIPE Cp
			case 57: // AttDef = NAME AttType DefaultDecl
			case 64: // ExternalID = PUBLIC STRING STRING
			case 86: // Enumeration = LPAREN NMTOKEN RPAREN
			{
				return _symbols[offset + 3];
			}
			case 30: // Choice = LPAREN Cp ChoiceCps RPAREN
			case 84: // NotationType = NOTATION_TYPE LPAREN NAME RPAREN
			case 87: // Enumeration = LPAREN NMTOKEN NmTokens RPAREN
			case 92: // IncludeSect = SECTION_START INCLUDE LBRACKET SECTION_END
			case 94: // IgnoreSect = SECTION_START IGNORE LBRACKET SECTION_END
			{
				return _symbols[offset + 4];
			}
			case 85: // NotationType = NOTATION_TYPE LPAREN NAME Names RPAREN
			case 93: // IncludeSect = SECTION_START INCLUDE LBRACKET Declarations SECTION_END
			case 95: // IgnoreSect = SECTION_START IGNORE LBRACKET Declarations SECTION_END
			{
				return _symbols[offset + 5];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
